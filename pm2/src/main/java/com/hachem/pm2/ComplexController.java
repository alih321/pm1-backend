package com.hachem.pm2;

import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/complexes") // This means URL's start with /demo (after Application path)
@CrossOrigin
public class ComplexController {
  @Autowired // This means to get the bean called userRepository Which is auto-generated by
             // Spring, we will use it to handle the data
  private ComplexRepository complexRepository;

  /*
   * COMPLEX END POINTS
   */

  @PostMapping(path = "/add") // Map ONLY POST Requests
  public @ResponseBody String addNewComplex(@RequestBody Complex complex) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    complexRepository.save(complex);
    return "Saved. " + complex.getName() + " has been added to the DB.";
  }

  @PostMapping(path = "/delete")
  public @ResponseBody String deleteComplex(@RequestParam int ID) {

    complexRepository.deleteById(ID);
    return "Complex with ID " + Integer.toString(ID) + " Deleted.";

  }

  @PostMapping(path = "/delete/all")
  public @ResponseBody String deleteAllComplex() {
    complexRepository.deleteAll();

    return "ALL COMPLEXES DELETED.";
  }

  @GetMapping(path = "query/all")
  public @ResponseBody Iterable<Complex> getAllComplex() {
    // This returns a JSON or XML with the users
    return complexRepository.findAll();
  }

  @GetMapping(path = "/query/name={name}")
  public @ResponseBody Iterable<Complex> queryComplex(@PathVariable String name) {

    return complexRepository.getByName(name);
  }


}